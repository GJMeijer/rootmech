plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^4
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
ft1
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
y0 <- 20
beta <- -0.5
shape <- 4
x <- seq(1, 10, l = 51)
y <- y0*x^beta*stats::rweibull(length(x), shape, 1/gamma(1 + 1/shape))
y[x <= 3] <- 10*y[x <= 3]
weights <- x^2
model <- "logistic"
ft1 <- powerlaw_fit_iterativeweighting(x, y, model, weights = weights)
xp <- seq(min(x), max(x), l = 101)
yp <- ft1$multiplier*xp^ft1$exponent
plot(x, y)
lines(xp, yp, col = "red")
install.packages("qpdf")
use_mit_license()
?vignette
vignette()
?vignette
vignette("rootmech")
vignette(package = "rootmech")
library(help="rootmech")
load_all()
check()
run_examples()
document()
?run_examples()
?run_examples(start = "powerlaw.R")
?run_examples(start = "powerlaw")
?run_examples(start = "powerlaw.Rd")
?run_examples()
run_examples(start = "powerlaw.Rd")
run_examples(start = "powerlaw")
run_examples(start = "powerlaw.R")
load_all()
run_examples(start = "powerlaw")
run_examples()
?qpdf
devtools::install()
vignette(package = "rootmech")
vignette("name", package = "rootmech")
?browseVignettes
browseVignettes("rootmech")
remotes::install_local(build_vignettes = TRUE)
remotes::install_local(build_vignettes = TRUE, force = TRUE)
browseVignettes("rootmech")
vignette("powerlaw_fit", package = "rootmech")
browseVignettes("rootmech")
RShowDoc("powerlaw_fit", package = "rootmech")
RShowDoc("power_fit", package = "rootmech")
devtools::load_all()
document()
install.packages("PKI")
?deployApp
?shiny::deployApp
?rsconnect::deployApp
?rsconnect
install_github("s-u/PKI")
load_all()
run_app()
run_app()
?renderHTML
?shiny::renderHTML
?shiny::renderHTML
runApp('inst/shiny/powerlaw_customdata')
run_app()
run_app()
run_app()
run_app()
run_app()
run_app()
run_app()
run_app()
run_app()
run_app()
runApp('inst/shiny/powerlaw_customdata')
runApp('inst/shiny/powerlaw_customdata')
run_app()
run_app()
run_app()
run_app()
runApp()
runApp()
run_app()
devtools::document
devtools::document()
run_app()
install.packages("rsconnect")
install.packages("openssl")
install.packages("PKI")
install.packages("PKI")
install.packages('PKI',,'http://www.rforge.net/')
exp(2*pi)
exp(-2*pi)
