% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_nls.R
\name{power_normal_sdpower_initialguess}
\alias{power_normal_sdpower_initialguess}
\title{Generate initial guess for `power_normal_sdpower_fit()` function}
\usage{
power_normal_sdpower_initialguess(x, y, weights = rep(1, length(x)))
}
\arguments{
\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a unitless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{weighting for each measurement. Default = 1, but a strong
case can be made for weighting with `weights = x^2` because of the
large effect of thick roots on root-reinforcement}
}
\value{
two-vector array with initial guesses for both power coefficients
}
\description{
Generate an initial guess for the fit power coefficient (beta) and the
standard derivation of residuals power coefficient (delta). This is used
as a starting point for a two-dimensional gradient-descent root-finding
algorithm.

Beta is estimated using a linear fit on the log-log transformed data.
Delta is then found using root solving (`stats::uniroot()` bracketing
algorithm), assuming the residuals (calculated using the initial log-log
transformed fit) are normally distributed with a mean of zero and a
standard deviation following a power law.
}
