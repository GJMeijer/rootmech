% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerlaw_normal.R
\name{powerlaw_normal_freebetadelta_root_jacobian}
\alias{powerlaw_normal_freebetadelta_root_jacobian}
\title{Jacobian of function `powerlaw_normal_freebetadelta_root()`}
\usage{
powerlaw_normal_freebetadelta_root_jacobian(
  par,
  x,
  y,
  weights = rep(1, length(x))
)
}
\arguments{
\item{par}{vector with mean and standard deviation power-law exponents}

\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a dimensionless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{vector with weighting for each observation (default: 1)}
}
\value{
derivative of `powerlaw_normal_freebetadelta_root()` with respect to
  elements in `par`
}
\description{
Returns the derivative of the function `powerlaw_normal_freebetadelta_root()`
with respect to input argument `par`
}
\examples{
# parameters
y0 <- 20
beta <- -0.25
sigma0 <- 2.5
delta <- -0.5
x <- seq(1, 8, l = 50001)
mu <- y0*x^beta
sigma <- sigma0*x^delta
y <- abs(stats::rnorm(length(x), mu, sigma))
w <- stats::runif(length(x), 0.9, 1.1)
par <- c(beta, delta)

eps <- 1e-6
f0 <- powerlaw_normal_freebetadelta_root(par, x, y, weights = w)
f1 <- powerlaw_normal_freebetadelta_root(par + c(eps, 0), x, y, weights = w)
f2 <- powerlaw_normal_freebetadelta_root(par + c(0, eps), x, y, weights = w)
(cbind(f1, f2) - f0)/eps
powerlaw_normal_freebetadelta_root_jacobian(par, x, y, weights = w)

}
