% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rootcount.R
\name{rootcount_multiplier_jacobian}
\alias{rootcount_multiplier_jacobian}
\title{Derivative of function `rootcount_multiplier()`}
\usage{
rootcount_multiplier_jacobian(xb, b, xmin, xmax)
}
\arguments{
\item{xb}{vector with x-breakpoints between segments}

\item{b}{vector with power-law power coefficients for each segment}

\item{xmin, xmax}{minimum and maximum values of `x` to use in the fit.
By default, `xmin = min(x)` and `xmax = max(x)` since this will maximise
the probability. These values may however be overwritten if required.}
}
\value{
a list containing the derivatives for each input parameter. Has
  fields `xb` and `b`.
}
\description{
Generates the derivative of the results of the function
`rootcount_multiplier()` with respect to its input parameters `xb` and `b`.

Function is vectorised.
}
\examples{
# Test jacobian by comparing to numberical solution
xb <- c(3, 4)
b <- c(-1.2, -0.2, 1.3)
xmin <- 2.5
xmax <- 5.5

t <- rootcount_multiplier(xb, b, xmin, xmax)
J <- rootcount_multiplier_jacobian(xb, b, xmin, xmax)

eps <- 1e-6
Jxb <- matrix(0, nrow = length(b), ncol = length(xb))
for (i in 1:length(xb)) {
  dx <- rep(0, length(xb))
  dx[i] <- eps
  Jxb[, i] <- (rootcount_multiplier(xb + dx, b, xmin, xmax) - t)/eps
}

Jb <- matrix(0, nrow = length(b), ncol = length(b))
for (i in 1:length(b)) {
  dx <- rep(0, length(b))
  dx[i] <- eps
  Jb[, i] <- (rootcount_multiplier(xb, b + dx, xmin, xmax) - t)/eps
}

J
Jxb
Jb
}
