% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_logtransform.R
\name{power_logtransform_fit}
\alias{power_logtransform_fit}
\title{Fit power-law function using linear fitting on the log-log-transform}
\usage{
power_logtransform_fit(x, y, weights = rep(1, length(x)))
}
\arguments{
\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a unitless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{weighting for each measurement. Default = 1, but a strong
case can be made for weighting with `weights = x^2` because of the
large effect of thick roots on root-reinforcement}
}
\value{
dataframe with the unadjusted R^2 value of best fit (field `r2`),
  the multiplier (`multiplier`) and power coefficient (`power`), the
  standard deviation of the log-transformed residuals (`sdlog`) and the
  loglikelihood score (`loglikelihood`)
}
\description{
Fit a power law function between `x` and `y` in the form y = a*x^b.

The fit is generated using the `stats::lm()` linear least-squares
regression function in R, between the log-transformed x and y data.

The power-law function describing the 'mean' data is given by

y = exp(0.5*a*sdlog^2)*x^b

where a is the intercept, b is the gradient of the linear fit on the
log-log-transform. sdlog is the standard deviation of the residuals of the
log-log fit. The correction exp(0.5*sdlog^2) is required since the mean of
the log(y) is not equal to the mean of y.
}
\examples{
x <- seq(2, 10, l = 25)
y <- 10*x^-0.5 * rweibull(length(x), shape = 4, scale = 1/gamma(1 + 1/4))
ft <- power_logtransform_fit(x, y)

xp <- seq(min(x), max(x), l = 101)
yp <- ft$multiplier*xp^ft$power

plot(x, y)
lines(xp, yp)

}
