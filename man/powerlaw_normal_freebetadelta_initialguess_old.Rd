% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerlaw_normal.R
\name{powerlaw_normal_freebetadelta_initialguess_old}
\alias{powerlaw_normal_freebetadelta_initialguess_old}
\title{Generate initial guess for `powerlaw_normal_fit()` with two unknown exponents}
\usage{
powerlaw_normal_freebetadelta_initialguess_old(
  x,
  y,
  weights = rep(1, length(x)),
  method = "bisection",
  range = c(-1, 1)
)
}
\arguments{
\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a dimensionless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{vector with weighting for each observation (default: 1)}

\item{method}{Only used when finding a single root.
Choose `newton` for gradient descent solving, using the
`rootSolve::multiroot()` function, or `bisection` for bisection root
solving algorithm using the `stats::uniroot()` function.
When using a multivariate root, `rootSolve::multiroot()` will always be
used.}

\item{range}{two-value array to add to best guess, to define initial
interval for bisection algorithm}
}
\value{
estimate for power-law exponents for the mean and standard deviation
}
\description{
Generate an initial guess for mean and standard deviation power-law
exponents, to be used in function `powerlaw_normal_fit()`.

The mean power-law exponent (beta) is estimated using linear regression on
log-transformed x and y data.

The standard deviation power-law exponent (delta) is subsequently fitted
using loglikelihood root solving, assuming <beta> as fixed.
}
