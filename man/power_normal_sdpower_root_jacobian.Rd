% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_nls.R
\name{power_normal_sdpower_root_jacobian}
\alias{power_normal_sdpower_root_jacobian}
\title{Jacobian of function `power_normal_sdpower_root()`}
\usage{
power_normal_sdpower_root_jacobian(par, x, y, weights = rep(1, length(x)))
}
\arguments{
\item{par}{two-parameter vector with values of beta and delta (power of
power law curve, power of standard deviation of residuals)}

\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a unitless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{weighting for each measurement. Default = 1, but a strong
case can be made for weighting with `weights = x^2` because of the
large effect of thick roots on root-reinforcement}
}
\value{
a two by two vector with the jacobian.
}
\description{
Returns the derivative of the function `power_normal_sdpower_root()` with
respect to the input arguments in `par`.
}
\examples{
# Test derivative - compare to simple numerical solution
par <- c(-0.6, -0.35)
x <- seq(2, 10, l = 25)
y <- 10*x^-beta * rweibull(length(x), shape = 4, scale = 1/gamma(1 + 1/4))
w <- runif(length(x))

eps <- 1e-6
bd <- power_normal_sdpower_root(par, x, y, weights = w)
bd1 <- power_normal_sdpower_root(par + c(eps, 0), x, y, weights = w)
bd2 <- power_normal_sdpower_root(par + c(0, eps), x, y, weights = w)
(cbind(bd1, bd2) - bd)/eps
power_normal_sdpower_root_jacobian(par, x, y, weights = w)

}
