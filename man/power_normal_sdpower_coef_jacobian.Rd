% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_nls.R
\name{power_normal_sdpower_coef_jacobian}
\alias{power_normal_sdpower_coef_jacobian}
\title{Jacobian of `power_normal_sdpower_coef()`}
\usage{
power_normal_sdpower_coef_jacobian(
  beta,
  delta,
  x,
  y,
  weights = rep(1, length(x))
)
}
\arguments{
\item{beta}{power coefficient of the fit}

\item{delta}{power coefficient of the standard deviation of residuals}

\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a unitless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{weighting for each measurement. Default = 1, but a strong
case can be made for weighting with `weights = x^2` because of the
large effect of thick roots on root-reinforcement}
}
\value{
a 8*2 matrix (rows = coefficients, columns = derivatives, i.e. beta
  and delta)
}
\description{
Return the derivative of intermediate coefficients (determined using the
function `power_normal_sdpower_coef()`) with respect to input arguments
`beta` and `delta`.
}
\examples{
# Test derivative - compare to simple numerical solution
beta <- -0.6
delta <- 0.2
x <- seq(2, 10, l = 25)
y <- 10*x^-beta * rweibull(length(x), shape = 4, scale = 1/gamma(1 + 1/4))
w <- runif(length(x))

eps <- 1e-6
co <- power_normal_sdpower_coef(beta, delta, x, y, weights = w)
co1 <- power_normal_sdpower_coef(beta + eps, delta, x, y, weights = w)
co2 <- power_normal_sdpower_coef(beta, delta + eps, x, y, weights = w)
(cbind(co1, co2) - co)/eps
power_normal_sdpower_coef_jacobian(beta, delta, x, y, weights = w)
}
