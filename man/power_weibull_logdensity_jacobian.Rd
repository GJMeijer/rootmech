% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_weibull.R
\name{power_weibull_logdensity_jacobian}
\alias{power_weibull_logdensity_jacobian}
\title{Derivative of function `power_weibull_logdensity()`}
\usage{
power_weibull_logdensity_jacobian(x, y, alpha, power, shape)
}
\arguments{
\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a unitless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{alpha}{vector with alpha-values}

\item{power}{vector with power-law power coefficients}

\item{shape}{vector with Weibull shape parameters}
}
\value{
list with fields `alpha`, `power` and `shape`, containing jacobian
  matrices for these input arguments
}
\description{
Generates the derivative of the results of the function
`power_weibull_logdensity()` with respect to its input arguments `alpha`,
`power` and `shape`

Function is vectorised.
}
\examples{
multiplier <- 9.2
power <- -0.41
shape <- 4.2
alpha <- multiplier/gamma(1 + 1/shape)
x <- seq(2, 8, l = 6)
y <- multiplier*x^power*rweibull(length(x), shape = shape, scale = 1/gamma(1 + 1/shape))

p <- power_weibull_logdensity(x, y, alpha, power, shape)
J <- power_weibull_logdensity_jacobian(x, y, alpha, power, shape)

eps <- 1e-6
Jalpha <- (power_weibull_logdensity(x, y, alpha + eps, power, shape) - p)/eps
Jpower <- (power_weibull_logdensity(x, y, alpha, power + eps, shape) - p)/eps
Jshape <- (power_weibull_logdensity(x, y, alpha, power, shape + eps) - p)/eps

J
Jalpha
Jpower
Jshape
}
