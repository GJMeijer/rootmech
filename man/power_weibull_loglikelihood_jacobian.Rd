% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_weibull.R
\name{power_weibull_loglikelihood_jacobian}
\alias{power_weibull_loglikelihood_jacobian}
\title{Derivative of function `power_weibull_loglikelihood()`}
\usage{
power_weibull_loglikelihood_jacobian(par, lx, ly, weights = rep(1, length(lx)))
}
\arguments{
\item{par}{fitting parameter vector: log(multiplier), power, log(shape).}

\item{lx, ly}{vectors with log-transformed x and y measurements}

\item{weights}{weighting for each measurement}
}
\value{
vector with derivatives with respect to `par`
}
\description{
Generates the derivative of the results of the function
`power_weibull_loglikelihood()` with respect to its input argument `par`.

Function is vectorised.
}
\examples{
# Compare analytical and numberical jacobians
x <- seq(1, 10, l = 51)
y <- 5*x^(0.5) + runif(length(x))
lx <- log(x)
ly <- log(y)
par <- c(log(3), -0.2, log(3.4))
weights <- x

J <- power_weibull_loglikelihood_jacobian(
  par, lx, ly, weights = weights
)

eps <- 1e-6
L <- power_weibull_loglikelihood(
  par, lx, ly, weights = weights
)
J2 <- rep(NA, 3)
for (i in 1:3) {
  dx <- rep(0, 3)
  dx[i] <- dx[i] + eps
  J2[i] <- (power_weibull_loglikelihood(
    par + dx, lx, ly, weights = weights) - L)/eps
}

J
J2

}
