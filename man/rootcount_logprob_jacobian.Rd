% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rootcount.R
\name{rootcount_logprob_jacobian}
\alias{rootcount_logprob_jacobian}
\title{Derivative of function `rootcount_logprob()`}
\usage{
rootcount_logprob_jacobian(logxb, b, logx)
}
\arguments{
\item{logxb}{vector with log-transformed values of the x-breakpoints between
segments}

\item{b}{vector with power-law power coefficients for each segment}

\item{logx}{vector with log-transformed observations x}
}
\value{
a list containing the derivatives for each input parameter. Has
  fields `logxb` and `b`.
}
\description{
Generates the derivative of the results of the function `rootcount_logprob()`
with respect to its input parameters `logxb` and `b`.

Function is vectorised.
}
\examples{
# Test jacobian by comparing to numberical solution
logxb <- c(1.25, 1.35)
b <- c(2.5, 3.1, -2.5)
logx <- seq(1.2, 1.5, l = 9)

p0 <- rootcount_logprob(logxb, b, logx)
J <- rootcount_logprob_jacobian(logxb, b, logx)

eps <- 1e-6
Jb <- matrix(0, nrow = length(logx), ncol = length(b))
for (i in 1:length(b)) {
  dx <- rep(0, length(b))
  dx[i] <- eps
  p1 <- rootcount_logprob(logxb, b + dx, logx)
  Jb[, i] <- (p1 - p0)/eps
}

Jlogxb <- matrix(0, nrow = length(logx), ncol = length(logxb))
for (i in 1:length(logxb)) {
  dx <- rep(0, length(logxb))
  dx[i] <- eps
  p1 <- rootcount_logprob(logxb + dx, b, logx)
  Jlogxb[, i] <- (p1 - p0)/eps
}

J
Jlogxb
Jb

}
