% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerlaw_uniform.R
\name{powerlaw_uniform_fit}
\alias{powerlaw_uniform_fit}
\title{Power-law fit with scaled uniformly distributed residuals}
\usage{
powerlaw_uniform_fit(
  x,
  y,
  weights = rep(1, length(x)),
  method = "chull",
  start = NULL,
  range = 0.5 * c(-1, 1)
)
}
\arguments{
\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a dimensionless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{vector with weighting for each observation (default: 1)}

\item{method}{if \code{method == "chull"}, optional values for the power-law
exponent are acquired from the vertices of a convex hull circumscribing
the log-transformed x,y data. The value minimising the loglikelihood
function is then used. If \code{method == "bisection"}, the best fitting value
is found using bisection of first derivative of the loglikelihood
function. \code{"chull"} is more accurate (no approximation) but may be slower
for large datasets.}

\item{start}{initial guess for power-log exponent. If not defined, an
initial guess is made using linear regression on log-transformed x and y
values}

\item{range}{two-value array to add to best guess, to define initial
interval for bisection algorithm}
}
\value{
a list containing the fields
\itemize{
\item \code{loglikelihood}: the log-likelihood score of the fit
\item \code{multiplier}: fitted power-law multiplier
\item \code{exponent}: fitted power coefficient
\item \code{width}: width of the uniform distribution at x = 1
}
}
\description{
Power-law fit of (x, y) data. For each value of x, the mean
of y is described by

mu = y0*x^beta

where y0 is the power law multiplier, and beta the power law exponent.

The width of the uniform distribution scales with the mean, i.e.

w = w0*x^beta

where w0 is the power-law multiplier for the width of the uniform
distribution at x = 1.

The optimal fitting parameters y0, beta and w0 are found by maximising
the (weighted) loglikelihood.
}
\examples{
y0 <- 20
beta <- -0.5
range <- 10
x <- seq(1, 8, l = 101)
y <- stats::runif(length(x), (y0 - 0.5*range)*x^beta, (y0 + 0.5*range)*x^beta)

ft <- powerlaw_uniform_fit(x, y)
ft
xp <- seq(min(x), max(x), l = 251)
yp <- ft$multiplier*xp^ft$exponent

plot(x, y)
lines(xp, yp, col = "red")
lines(xp, yp*(1 - 0.5*ft$width/ft$multiplier), col = "blue")
lines(xp, yp*(1 + 0.5*ft$width/ft$multiplier), col = "blue")

}
