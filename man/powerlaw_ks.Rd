% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerlaw.R
\name{powerlaw_ks}
\alias{powerlaw_ks}
\title{Kolmogorov-Smirnov of power-law fit}
\usage{
powerlaw_ks(
  x,
  y,
  model,
  multiplier,
  exponent,
  sd_multiplier = NA,
  sd_exponent = 0,
  sdlog = NA,
  shape = NA,
  scale = NA,
  width = NA,
  n = 101,
  gamma = 0.577215664901533,
  weights = rep(1, length(x))
)
}
\arguments{
\item{x}{a-values at which to generate the interval}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{model}{fitting model, see function \code{powerlaw_fit()}}

\item{multiplier}{fitted power law multiplier}

\item{exponent}{fitted power law exponent}

\item{sd_multiplier}{fitted standard deviation multiplier}

\item{sd_exponent}{fitted standard deviation exponent}

\item{sdlog}{fitted lognormal standard deviation}

\item{shape}{fitted shape parameter}

\item{scale}{fitted scale parameter}

\item{width}{fitted width parameter}

\item{n}{number of points on fitted cumulative trace}

\item{gamma}{Euler-Mascheroni constant}

\item{weights}{vector with weighting for each observation (default: 1)}
}
\value{
list with fields:
\itemize{
\item \code{ks_distance}: KS-distance
\item \code{data}: dataframe (with \code{x} and \code{y} fields) for cumulative density
distribution of data
\item \code{fit}: dataframe (with \code{x} and \code{y} fields) for cumulative density
distribution of fit
\item \code{difference}: dataframe (with \code{x} and \code{y} fields) of locations at
maximum distance (KS-distance) between the data and fitted curves#'
}
}
\description{
Calculate Kolmogorov-Smirnov (KS) distance for power-law fit.

Also generates dataframes to plot measured and fitted cumulative density
results.
}
\examples{
# generate some data
y0 <- 20
beta <- -0.5
kappa <- 4
lambda <- 1/gamma(1 + 1/kappa)
x <- seq(1, 8, l = 51)
y <- y0*x^beta*rweibull(length(x), kappa, lambda)
w <- x
w <- rep(1, length(x))

# gamma
ft <- powerlaw_fit(x, y, "gamma", weights = w)
ks <- powerlaw_ks(
  x, y, "gamma", ft$multiplier, ft$exponent, shape = ft$shape, weights = w
)
# gumbel
ft <- powerlaw_fit(x, y, "gumbel")
ks <- powerlaw_ks(
  x, y, "gumbel", ft$multiplier, ft$exponent, scale = ft$scale
)
# logistic
ft <- powerlaw_fit(x, y, "logistic")
ks <- powerlaw_ks(
  x, y, "logistic", ft$multiplier, ft$exponent, scale = ft$scale
)
# lognormal
ft <- powerlaw_fit(x, y, "lognormal")
ks <- powerlaw_ks(
  x, y, "lognormal", ft$multiplier, ft$exponent, sdlog = ft$sdlog
)
# normal
ft <- powerlaw_fit(x, y, "normal_strength")
ks <- powerlaw_ks(
  x, y, "normal_strength", ft$multiplier, ft$exponent,
  sd_multiplier = ft$sd_multiplier
)
# weibull
ft <- powerlaw_fit(x, y, "weibull")
ks <- powerlaw_ks(
  x, y, "weibull", ft$multiplier, ft$exponent, shape = ft$shape
)
# uniform
ft <- powerlaw_fit(x, y, "uniform")
ks <- powerlaw_ks(
  x, y, "uniform", ft$multiplier, ft$exponent, width = ft$width
)

# plot
plot(ks$data$x, ks$data$y, "l")
lines(ks$fit$x, ks$fit$y, col = "blue")
lines(ks$difference$x, ks$difference$y, col = "red")

}
