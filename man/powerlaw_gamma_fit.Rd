% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerlaw_gamma.R
\name{powerlaw_gamma_fit}
\alias{powerlaw_gamma_fit}
\title{Fit power law + gamma using loglikelihood fitting}
\usage{
powerlaw_gamma_fit(
  x,
  y,
  weights = rep(1, length(x)),
  start = NULL,
  method = "bisection",
  range = c(-1, 1)
)
}
\arguments{
\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a dimensionless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{vector with weighting for each observation (default: 1)}

\item{start}{initial guess for power-log exponent. If not defined, an
initial guess is made using linear regression on log-transformed x and y
values}

\item{method}{choose \code{newton} for gradient descent solving, using the
\code{rootSolve::multiroot()} function, or \code{bisection} for bisection root
solving algorithm using the \code{stats::uniroot()} function.}

\item{range}{two-value array to add to best guess, to define initial
interval for bisection algorithm}
}
\value{
a list containing the fields:
\itemize{
\item \code{loglikelihood}: the log-likelihood score of the fit
\item \code{multiplier}: fitted power-law multiplier
\item \code{exponent}: fitted power coefficient
\item \code{shape}: fitted gamma shape parameter
}
}
\description{
Fit a power law distribution plus a gamma distribution to a series
of test data (x, y), using the log-likelihood method.

The scale parameter of the gamma distribution is assumed to be equal
to the power-law describing the mean. The shape parameter is assumed
constant with x
}
\examples{
# parameters
x <- seq(1, 7, l = 101)
y0 <- 25
beta <- -0.5
k <- 10
theta <- y0*x^beta/k
y <- stats::rgamma(length(x), shape = k, scale = theta)

# fit
ft <- powerlaw_gamma_fit(x, y)
ft
xp <- seq(min(x), max(x), l = 251)
yp <- ft$multiplier*xp^ft$exponent

# plot data and best fit
plot(x, y)
lines(xp, yp, col = "red")

}
