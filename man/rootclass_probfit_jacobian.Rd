% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rootclasscount.R
\name{rootclass_probfit_jacobian}
\alias{rootclass_probfit_jacobian}
\title{Derivative of function `rootclass_probfit()`}
\usage{
rootclass_probfit_jacobian(xb, a, b)
}
\arguments{
\item{xb}{vector with x-breakpoints (length = number of segments + 1)}

\item{a}{power-law multipliers for each segment, as calculated with the
function `rootclass_multipliers()`}

\item{b}{vector with power law coefficients for each segment}
}
\value{
a list containing the derivatives for each input parameter. Has
  fields `xb`, `a` and `b`.
}
\description{
Generates the derivative of the results of the function
`rootclass_probfit()` with respect to input parameters `xb`, `a` and `b`.

Function is vectorised.
}
\examples{
xb <- c(1.5, 3.5, 6.5, 7.5, 8.5)
a <- seq(2, 4, l = length(xb) - 1)
b <- seq(-2, 2, l = length(xb) - 1)
p <- rootclass_probfit(xb, a, b)
J <- rootclass_probfit_jacobian(xb, a, b)

eps <- 1e-6
Jxb <- matrix(0, length(p), length(xb))
for (i in 1:length(xb)) {
  dx <- rep(0, length(xb))
  dx[i] <- eps
  Jxb[, i] <- (rootclass_probfit(xb + dx, a, b) - p)/eps
}
Ja <- matrix(0, length(p), length(a))
for (i in 1:length(a)) {
  dx <- rep(0, length(a))
  dx[i] <- eps
  Ja[, i] <- (rootclass_probfit(xb, a + dx, b) - p)/eps
}
Jb <- matrix(0, length(p), length(b))
for (i in 1:length(b)) {
  dx <- rep(0, length(b))
  dx[i] <- eps
  Jb[, i] <- (rootclass_probfit(xb, a, b + dx) - p)/eps
}

J
Jxb
Ja
Jb

}
