% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rootclasscount.R
\name{rootclass_probobs_jacobian}
\alias{rootclass_probobs_jacobian}
\title{Derivative of function `rootclass_probobs()`}
\usage{
rootclass_probobs_jacobian(
  xb,
  a,
  b,
  xmin,
  xmax,
  weights_multiplier = rep(1, length(xmin)),
  weights_power = rep(0, length(xmin))
)
}
\arguments{
\item{xb}{vector with x-breakpoints (length = number of segments + 1)}

\item{a}{power-law multipliers for each segment, as calculated with the
function `rootclass_multipliers()`}

\item{b}{vector with power law coefficients for each segment}

\item{xmin, xmax}{vectors with lower and upper limits for each root diameter
class. `xmax > xmin >= TRUE` for each element.}

\item{weights_multiplier}{vector with fitting multiplication weights for
each class}

\item{weights_power}{vector with fitting power-law coefficients for each
class}
}
\value{
a list containing the derivatives for each input parameter. Has
  fields `xb`, `a` and `b`.
}
\description{
Generates the derivative of the results of the function
`rootclass_probobs()` with respect to input parameters `xb`, `a` and `b`.

Function is vectorised.
}
\examples{
xb <- c(2.2, 3.5, 6.5, 7.5, 8.5)
a <- seq(2, 4, l = length(xb) - 1)
b <- seq(-2, 2, l = length(xb) - 1)
xmin <- c(1, 3, 4)
xmax <- c(2.5, 7, 20)
weights_multiplier <- runif(length(xmin), 3, 8)
weights_power <- runif(length(xmin), -2, 2)
p <- rootclass_probobs(xb, a, b, xmin, xmax,
  weights_multiplier = weights_multiplier, weights_power = weights_power)
J <- rootclass_probobs_jacobian(xb, a, b, xmin, xmax,
  weights_multiplier = weights_multiplier, weights_power = weights_power)

eps <- 1e-6
Jxb <- matrix(0, nrow = length(p), ncol = length(xb))
for (i in 1:length(xb)) {
  dx <- rep(0, length(xb))
  dx[i] <- eps
  Jxb[, i] <- (rootclass_probobs(xb + dx, a, b, xmin, xmax,
    weights_multiplier = weights_multiplier,
    weights_power = weights_power) - p)/eps
}
Ja <- matrix(0, nrow = length(p), ncol = length(a))
for (i in 1:length(a)) {
  dx <- rep(0, length(a))
  dx[i] <- eps
  Ja[, i] <- (rootclass_probobs(
    xb, a + dx, b, xmin, xmax, weights_multiplier = weights_multiplier,
    weights_power = weights_power
  ) - p)/eps
}
Jb <- matrix(0, nrow = length(p), ncol = length(b))
for (i in 1:length(b)) {
  dx <- rep(0, length(b))
  dx[i] <- eps
  Jb[, i] <- (rootclass_probobs(
    xb, a, b + dx, xmin, xmax, weights_multiplier = weights_multiplier,
    weights_power = weights_power
  ) - p)/eps
}

J
Jxb
Ja
Jb

}
