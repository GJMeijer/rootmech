% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerlaw_normal.R
\name{powerlaw_normal_freebetadelta_loglikelihood}
\alias{powerlaw_normal_freebetadelta_loglikelihood}
\title{Calculate power-law normal loglikelihood - separate power law for sd}
\usage{
powerlaw_normal_freebetadelta_loglikelihood(
  par,
  x,
  y,
  weights = rep(1, length(x)),
  deriv = 0
)
}
\arguments{
\item{par}{vector with fitting parameters (power-law multiplier, power-law
exponent, standard deviation power-law multiplier, and standard deviation
power-law exponent)}

\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a dimensionless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{vector with weighting for each observation (default: 1)}

\item{deriv}{order of partial derivative requested}
}
\value{
loglikelihood, or its partial derivatives to order `deriv`
}
\description{
Calculate the weighted loglikelihood for a power-law fit with normal
residuals. Standard deviation follows its own power-law.
Can also be used to calculate the first or second partial
derivative with respect to fitting parameters.
}
\examples{
# define parameters
y0 <- 20
beta <- -0.5
sigma0 <- 2
delta <- -0.75
x <- seq(1, 8, l = 101)
mu <- y0*x^beta
sigma <- sigma0*x^delta
y <- rnorm(length(x), mu, sigma)
w <- stats::runif(length(x), 0.8, 1.2)
par <- c(y0, beta, sigma0, delta)

# check loglikelihood
mu <- y0*x^beta
sigma <- sigma0*x^delta
sum(w*stats::dnorm(y, mu, sigma, log = TRUE))
powerlaw_normal_freebetadelta_loglikelihood(par, x, y, weights = w)

# test first derivative
eps <- 1e-6
f0 <- powerlaw_normal_freebetadelta_loglikelihood(
  par, x, y, weights = w, deriv = 0)
f1 <- powerlaw_normal_freebetadelta_loglikelihood(
  par + c(eps, 0, 0, 0), x, y, weights = w, deriv = 0
)
f2 <- powerlaw_normal_freebetadelta_loglikelihood(
  par + c(0, eps, 0, 0), x, y, weights = w, deriv = 0
)
f3 <- powerlaw_normal_freebetadelta_loglikelihood(
  par + c(0, 0, eps, 0), x, y, weights = w, deriv = 0
)
f4 <- powerlaw_normal_freebetadelta_loglikelihood(
  par + c(0, 0, 0, eps), x, y, weights = w, deriv = 0
)
(c(f1, f2, f3, f4) - f0)/eps
powerlaw_normal_freebetadelta_loglikelihood(
  par, x, y, weights = w, deriv = 1
)

# test second derivative
f0 <- powerlaw_normal_freebetadelta_loglikelihood(
  par, x, y, weights = w, deriv = 1
)
f1 <- powerlaw_normal_freebetadelta_loglikelihood(
  par + c(eps, 0, 0, 0), x, y, weights = w, deriv = 1
)
f2 <- powerlaw_normal_freebetadelta_loglikelihood(
  par + c(0, eps, 0, 0), x, y, weights = w, deriv = 1
)
f3 <- powerlaw_normal_freebetadelta_loglikelihood(
  par + c(0, 0, eps, 0), x, y, weights = w, deriv = 1
)
f4 <- powerlaw_normal_freebetadelta_loglikelihood(
  par + c(0, 0, 0, eps), x, y, weights = w, deriv = 1
)
(cbind(f1, f2, f3, f4) - f0)/eps
powerlaw_normal_freebetadelta_loglikelihood(
  par, x, y, weights = w, deriv = 2
)

}
