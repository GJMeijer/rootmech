% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_weibull.R
\name{power_weibull_fit}
\alias{power_weibull_fit}
\title{Fit power law + weibull using loglikelihood fitting}
\usage{
power_weibull_fit(x, y, weights = rep(1, length(x)), guess = NULL)
}
\arguments{
\item{x}{measured x-values (e.g. root diameters)}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{weighting for each measurement. Default = 1, but a strong
case can be made for weighting with `weights = x^2` because of the
large effect of thick roots on root-reinforcement}

\item{guess}{initial guess for multiplier (log-transformed), power-law,
and weibull shape parameter (log-transformed). If not defined, an initial
guess is made using the function `power_weibull_initialguess()`}
}
\value{
a list containing the fields
  * `loglikelihood`: the log-likelihood score of the fit
  * `multiplier`: fit power-law multiplier
  * `power`: fit power coefficient
  * `shape`: fit Weibull shape parameter
}
\description{
Fit a power law distribution plus a Weibull shape parameter to a series
of test data (x, y), using the log-likelihood method.

The variation in the data, defined as the ratio (y/y_fit) where y_fit is
predicted using a power law fit, is assumed to be Weibull distribution
with a mean of 1 and a to be fitted shape parameter.'

To find the best fitting parameters for the power law, the probability of
all measurements is maximised.

Measurements may be weighted according to their x-values in the form:
probability_weigthed = probability_{x,y}^weights, where `weights` is the
vector with weighting for each measured point. Given
that most biomechanical test relatively few thick roots, but thick roots
have a large effect on the calculated reinforcement, I suggest weighting
by the cross-sectional area, `weights = x^2`.


Function uses the function `optim()` from the package `stats` to conduct
the optimalisation.

Initial parameter guesses for the log-likelihood fitting are estimated
using simple linear fits on transformed values of the input. These extra
initial fitting procedures ensure the `optim()` does not return inaccurate
values because the intial parameter guesses are too far removed from the
solution.
}
\examples{
# input parameters
x <- seq(1, 10, l = 251)
alpha <- 5
beta <- -0.4
kappa <- 4
y <- alpha*x^beta*rweibull(length(x), kappa, 1/gamma(1 + 1/kappa))

# fit
ft <- power_weibull_fit(x, y)
ft

# plot
xp <- seq(min(x), max(x), l = 101)
yp <- ft$multiplier*xp^ft$power
plot(x, y)
lines(xp, yp, col = "red")
}
