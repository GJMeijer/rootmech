% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power.R
\name{power_fit}
\alias{power_fit}
\title{Fit power-law distribution to data}
\usage{
power_fit(
  x,
  xmin = min(x),
  xmax = max(x),
  weights = rep(1, length(x)),
  eps = .Machine$double.eps^0.5,
  range = c(-1, 1)
)
}
\arguments{
\item{x}{vector with observations (must all be finite and >0)}

\item{xmin, xmax}{min and max limits of the density function}

\item{weights}{weighting for each observation in \code{x}}

\item{eps}{small value, to catch case where b == -1}

\item{range}{initial search range around best initial guess, used for the
bisection algorithm}
}
\value{
a list with fields:
\itemize{
\item loglikelihood: loglikelihood of the best fit
\item xmin: lower bound of fit domain
\item xmax: upper bound of fit domain
\item multiplier: fitted power-law multiplier
\item exponent: fitted power-law exponent
}
}
\description{
Fit a power probability distribution to a series of observations. The
probability density function is defined as:

p(x) = a^x^b

The function is only defined between lower bound x = xmin and upper bound
x = xmax. The multiplier \code{a} is defined such so that the total probability
across the interval equals 1.

The fit is conducted by finding the value of power coefficient \code{b} that sets
the derivative of the loglikelihood function equal to zero. This is done
using the bisection solver inbuilt in R (\code{stats::uniroot()}).
}
\examples{
b <- 1.5
xmin <- 2
xmax <- 7
y <- stats::runif(100, 0, 1)
x <- (y*(xmax^(b + 1) - xmin^(b + 1)) + xmin^(b + 1))^(1/(b + 1))
power_fit(x)

}
