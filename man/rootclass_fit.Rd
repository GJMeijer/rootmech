% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rootclasscount.R
\name{rootclass_fit}
\alias{rootclass_fit}
\title{Multisegment power-law fitting of root class count}
\usage{
rootclass_fit(
  xmin,
  xmax,
  y,
  ns,
  n0 = 0,
  fixed = rep(NA, 2 * ns + 1),
  guess = NULL,
  weights_multiplier = rep(1, length(xmin)),
  weights_power = rep(0, length(xmin))
)
}
\arguments{
\item{xmin, xmax}{vectors with lower and upper limits for each root diameter
class. `xmax > xmin >= TRUE` for each element.}

\item{y}{vector with number of roots (or total root length) per class}

\item{ns}{number of power-law segments to use in fit}

\item{n0}{number of extra optional segments breakpoint positions to include
in generating an initial guess}

\item{fixed}{vector with `2*ns + 1` elements, with values of the
fitting parameter (`ns + 1` breakpoints, `ns` power-law coefficients)
that should be fixed and therefore not fitted. Values that are `NA` will
be fitted while any non-NA will be held constant}

\item{guess}{initial guess for the fitting parameters (a vector with
`ns + 1` x-breakpoints, and `ns` power-law coefficients). If not
provided, an initial guess is made according to the function
`rootclass_initialguess()`,}

\item{weights_multiplier}{vector with fitting multiplication weights for
each class}

\item{weights_power}{vector with fitting power-law coefficients for each
class}
}
\value{
a list containing the loglikelihood score of the best fit
  (`loglikelihood`) and a dataframe (`par`) with power-law coefficients
  for each segment
}
\description{
Fits a multisegment, C^0-continuous power-law probability distribution to
root diameter class data. Each class has an lower (`xmin`) and upper (`xmax`)
diameter limit, and `y` number of roots within (alternatively, `y` could
be root length, for example acquired with WinRhizo measurements).

Fitting is performed by maximising the likelihood.
}
\examples{
no <- 9
xc <- seq(2, 6.5, l = no + 1)
xmin <- xc[1:no]
xmax <- xc[2:(no + 1)]
y <- (8 - (0.5*(xmin + xmax) - 5)^2)

ns <- 2

ft1 <- rootclass_fit(xmin, xmax, y, ns)
ft2 <- rootclass_fit(xmin, xmax, y, ns, fixed = c(1, NA, 7, NA, -3))

rootclass_cumulative_plot(ft1$par, xmin, xmax, y)
rootclass_cumulative_plot(ft2$par, xmin, xmax, y)
}
