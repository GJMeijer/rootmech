% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerlaw.R
\name{powerlaw_predictioninterval}
\alias{powerlaw_predictioninterval}
\title{Generate prediction intervals for power law fits}
\usage{
powerlaw_predictioninterval(
  x,
  model,
  multiplier,
  exponent,
  sd_multiplier = NA,
  sd_exponent = 0,
  sdlog = NA,
  shape = NA,
  scale = NA,
  width = NA,
  level = 0.95,
  gamma = 0.577215664901533
)
}
\arguments{
\item{x}{a-values at which to generate the interval}

\item{model}{fitting model, see function \code{powerlaw_fit()}}

\item{multiplier}{fitted power law multiplier}

\item{exponent}{fitted power law exponent}

\item{sd_multiplier}{fitted standard deviation multiplier}

\item{sd_exponent}{fitted standard deviation exponent}

\item{sdlog}{fitted lognormal standard deviation}

\item{shape}{fitted shape parameter}

\item{scale}{fitted scale parameter}

\item{width}{fitted width parameter}

\item{level}{significance level}

\item{gamma}{Euler-Mascheroni constant}
}
\value{
dataframe with fields:
\itemize{
\item \code{x}: x-coordinates
\item \code{y}: average (power law)
\item \code{ymin}: lower limit of the prediction interval
\item \code{ymax}: upper limit of the prediction interval
}
}
\description{
Calculate the upper and lower limits of the prediction interval for a
power law fit.
}
\examples{
# generate some data
y0 <- 20
beta <- -0.5
kappa <- 4
lambda <- 1/gamma(1 + 1/kappa)
x <- seq(1, 8, l = 101)
y <- y0*x^beta*rweibull(length(x), kappa, lambda)

# weibull fit
ftw <- powerlaw_fit(x, y, "weibull")
# generate prediction interval
dfw <- powerlaw_predictioninterval(
  seq(min(x), max(x), l = 251), "weibull",
  ftw$multiplier, ftw$exponent, shape = ftw$shape
)
# plot
plot(x, y)
lines(dfw$x, dfw$y, col = "red")
lines(dfw$x, dfw$ymin, col = "blue")
lines(dfw$x, dfw$ymax, col = "blue")

# normal fit
ftn <- powerlaw_fit(x, y, "normal_strength")
# generate prediction interval
dfn <- powerlaw_predictioninterval(
  seq(min(x), max(x), l = 251), "normal_strength",
  ftn$multiplier, ftn$exponent, sd_multiplier = ftn$sd_multiplier
)
# plot
plot(x, y)
lines(dfn$x, dfn$y, col = "red")
lines(dfn$x, dfn$ymin, col = "blue")
lines(dfn$x, dfn$ymax, col = "blue")

# gumbel fit
ftg <- powerlaw_fit(x, y, "gumbel")
# generate prediction interval
dfg <- powerlaw_predictioninterval(
  seq(min(x), max(x), l = 251), "gumbel",
  ftg$multiplier, ftg$exponent, scale = ftg$scale
)
# plot
plot(x, y)
lines(dfg$x, dfg$y, col = "red")
lines(dfg$x, dfg$ymin, col = "blue")
lines(dfg$x, dfg$ymax, col = "blue")

}
