% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rootclasscount.R
\name{rootclass_loglikelihood_jacobian}
\alias{rootclass_loglikelihood_jacobian}
\title{Derivative of function `rootclass_loglikelihood()`}
\usage{
rootclass_loglikelihood_jacobian(
  par,
  xmin,
  xmax,
  y,
  fixed = rep(NA, length(par)),
  weights_multiplier = rep(1, length(xmin)),
  weights_power = rep(0, length(xmin))
)
}
\arguments{
\item{par}{vector with fitting parameters. For `ns` segments, the vector will
consist of `ns + 1` consecutive x-breakpoints, followed by `ns` power-law
cower coefficients}

\item{xmin, xmax}{vectors with lower and upper limits for each root diameter
class. `xmax > xmin >= TRUE` for each element.}

\item{y}{vector with number of roots (or total root length) per class}

\item{fixed}{vector with `2*ns + 1` elements, with values of the
fitting parameter (`ns + 1` breakpoints, `ns` power-law coefficients)
that should be fixed and therefore not fitted. Values that are `NA` will
be fitted while any non-NA will be held constant}

\item{weights_multiplier}{vector with fitting multiplication weights for
each class}

\item{weights_power}{vector with fitting power-law coefficients for each
class}
}
\value{
a scalar containing the derivatives for each value in fitting vector
  `par`
}
\description{
Generates the derivative of the results of the function
`rootclass_loglikelihood()` with respect to fitting value input
`par`.

Function is vectorised.
}
\examples{
xb <- c(1.5, 3.5, 5.5)
b <- seq(-0.5, 0.5, l = length(xb) - 1)
par <- c(xb, b)
xmin <- c(2, 3, 4)
xmax <- c(2.5, 4, 6)
y <- c(3, 4, 5)
weights_multiplier <- runif(length(xmin), 2, 5)
weights_power <- runif(length(xmin), -2, 2)

L <- rootclass_loglikelihood(
  par, xmin, xmax, y, weights_multiplier = weights_multiplier,
  weights_power = weights_power
)
J <- rootclass_loglikelihood_jacobian(
  par, xmin, xmax, y, weights_multiplier = weights_multiplier,
  weights_power = weights_power
)

eps <- 1e-6
J2 <- rep(0, length(par))
for (i in 1:length(par)) {
  dx <- rep(0, length(par))
  dx[i] <- eps
  J2[i] <- (rootclass_loglikelihood(par + dx, xmin, xmax, y,
    weights_multiplier = weights_multiplier,
    weights_power = weights_power
   ) - L)/eps
}

J
J2

}
