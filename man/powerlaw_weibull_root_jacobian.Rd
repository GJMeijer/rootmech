% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/powerlaw_weibull.R
\name{powerlaw_weibull_root_jacobian}
\alias{powerlaw_weibull_root_jacobian}
\title{Jacobian of root to solve for power-law Weibull fitting}
\usage{
powerlaw_weibull_root_jacobian(par, x, y, weights = rep(1, length(x)))
}
\arguments{
\item{par}{fitting parameter (power-law exponent, and Weibull shape
parameter)}

\item{x}{measured x-values (e.g. root diameters). These values are assumed
to be already normalised by a reference value to ensure a dimensionless
parameter.}

\item{y}{measured y-values (e.g. root tensile strength)}

\item{weights}{vector with weighting for each observation (default: 1)}
}
\value{
derivative of function `powerlaw_weibull_root()` with respect to input
  argument `par`
}
\description{
Jacobian of root equation to solve for power-law Weibull fitting.
}
\examples{
# test jacobian - compare analytical function to numerical approximation
y0 <- 20
beta <- -0.5
kappa <- 10
x <- seq(1, 8, l = 51)
y <- y0*x^beta*rweibull(length(x), kappa, lambda)
weights <- runif(length(x), 0.8, 1.2)
par <- c(beta, kappa)

eps <- 1e-6
j0 <- powerlaw_weibull_root(par, x, y, weights = weights)
j1 <- powerlaw_weibull_root(par + c(eps, 0), x, y, weights = weights)
j2 <- powerlaw_weibull_root(par + c(0, eps), x, y, weights = weights)
(cbind(j1, j2) - j0)/eps
powerlaw_weibull_root_jacobian(par, x, y, weights = weights)

}
